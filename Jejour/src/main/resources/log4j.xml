<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN" "log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">

	<!-- Appenders -->
	<!-- 전달된 로그를 어디에 출력할 것 인지 결정하는 객체(콘솔창, 파일, DB저장) -->
	<appender name="console" class="org.apache.log4j.ConsoleAppender">
		<param name="Target" value="System.out" />
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%-5p: %c - %m%n" />
		</layout>
	</appender>
	
	<appender class="org.apache.log4j.DailyRollingFileAppender" name="fileLogger">
		<!-- 저장할 폴더는 반드시 실행되기 전 미리 만들어 두어야 한다. -->
		<param name="file" value="C:/Workspace/SpringWorkspace/Jejour/src/main/resources/logs/system/system.log" />
		<param name="Append" value="true" />
		<param name="datePattern" value=".yyyy-MM-dd" />
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%-5p: [%d{yyyy/MM/dd HH:mm:ss}] %F:%L - %m%n"/>
		</layout>
	</appender>
	
	<appender class="org.apache.log4j.DailyRollingFileAppender" name="loginLogger">
		<!-- 저장할 폴더는 반드시 실행되기 전 미리 만들어 두어야 한다. -->
		<param name="file" value="C:/Workspace/SpringWorkspace/Jejour/src/main/resources/logs/login/login.log" />
		<param name="Append" value="true" />
		<param name="datePattern" value=".yyyy-MM-dd" />
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%-5p: [%d{yyyy/MM/dd HH:mm:ss}] %F:%L - %m%n"/>
		</layout>
	</appender>
	<!-- 
		* %c : 카테고리명(logger이름)을 표시(클래스명)
		   * 카테고리명이 a.b.c일때, %c{2}는 b.c를 출력
		* %C : 클래스명을 표시함.   
		   * 풀 클래스 명이 com.kh.logger일때, %C{2}는 kh.logger를 출력
		* %d : 로그 시간을 출력한다. java.text.SimpleDateFormat에서 적절한 출력 포맷을 지정할 
		
		수 있다. 
		   * %d{HH:mm:ss, SSS}
		   * %d{yyyy MMM dd HH:mm:ss, SSS}
		   * %d{ABSOLUTE} 
		   * %d{DATE} 
		   * %d{ISO8601}
		* %F : 파일명을 출력. 로그시 수행한 메소드, 라인번호가 함께 출력된다.
		* %l : 로깅이 발생한 caller의 위치정보. 자바파일명:라인번호(링크제공) 
		* %L : 라인 번호만 출력한다(링크없음)
		* %m : 로그로 전달된 메시지를 출력한다.
		* %M : 로그를 수행한 메소드명을 출력한다. 
		* %n : 플랫폼 종속적인 개행문자가 출력. rn 또는 n
		* %p : 로그 이벤트명등의 priority 가 출력(debug, info, warn, error, fatal )
		* %r : 로그 처리시간 (milliseconds)
		* %t : 로그이벤트가 발생된 쓰레드의 이름을 출력
		* %% : % 표시를 출력. escaping
		* %r : 어플리케이션 시작 이후 부터 로깅이 발생한 시점의 시간(milliseconds)
		* %X : 로깅이 발생한 thread와 관련된 MDC(mapped diagnostic context)를 출력합니다. 
		
		%X{key} 형태.
     -->
	
	<!-- Logger : 실제 로그를 출력하는 객체 -->
	<!-- Application Loggers -->
	<logger name="com.kh.spring">
		<level value="info" />
	</logger>
	
	<!-- 3rdparty Loggers -->
	<logger name="org.springframework.core">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.beans">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.context">
		<level value="info" />
	</logger>

	<logger name="org.springframework.web">
		<level value="info" />
	</logger>
	
	<logger name="com.kh.spring.common.aop.AfterReturningLoginLogger" additivity="false"> <!-- additivity 중복을 허용하지않는다! -->
		<level value="info"/>
		<appender-ref ref="loginLogger"/>
	</logger>

	<!-- Root Logger -->
	<!--  
		   파라미터
		1. Log4j의 로그레벨 파라미터
		   * `DEBUG < INFO < WARN < ERROR < FATAL`
		   * 설정한 level속성값 이상만 화면에 보여진다.
		   * 예를 들어 INFO로 설정하면, DEBUG로 설정한 log는 출력되지 않음.
		
		로그레벨 | 설명
		FATAL | 아주 심각한 에러가 발생.
		ERROR | 어떤 요청 처리중 문제 발생.
		WARN | 프로그램의 실행에는 문제가 없지만, 향후 시스템 에러의 원인이 될 수 있는 
		             경고성 메시지 출력
		INFO | 상태변경과 같은 정보성 메시지
		DEBUG | 개발시 디버그 용도로 사용하는 메시지
		TRACE | 디버그 레벨이 너무 광범위한 것을 해결하기 위해서 좀 더 상세한 이벤트를 나타냄.
		
		2. appender-ref : 출력할 appender 지정. 생략시 출력되지 않고, additivity=true속성에 
		                                  의해 부모logger에 추가됨.
		                                  만약, additivity=false에 appender-ref도 지정하지 않으면, 로깅은 불가함.
	   
     -->
	<root>
		<priority value="warn" />
		<appender-ref ref="console" />
		<appender-ref ref="fileLogger"/>
	</root>
	
</log4j:configuration>
